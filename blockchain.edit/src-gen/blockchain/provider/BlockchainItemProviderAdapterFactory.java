/**
 */
package blockchain.provider;

import blockchain.util.BlockchainAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BlockchainItemProviderAdapterFactory extends BlockchainAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BlockchainItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockchain.Online_Education_System} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Online_Education_SystemItemProvider online_Education_SystemItemProvider;

	/**
	 * This creates an adapter for a {@link blockchain.Online_Education_System}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOnline_Education_SystemAdapter() {
		if (online_Education_SystemItemProvider == null) {
			online_Education_SystemItemProvider = new Online_Education_SystemItemProvider(this);
		}

		return online_Education_SystemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockchain.Block} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlockItemProvider blockItemProvider;

	/**
	 * This creates an adapter for a {@link blockchain.Block}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBlockAdapter() {
		if (blockItemProvider == null) {
			blockItemProvider = new BlockItemProvider(this);
		}

		return blockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockchain.Students_Credential} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Students_CredentialItemProvider students_CredentialItemProvider;

	/**
	 * This creates an adapter for a {@link blockchain.Students_Credential}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStudents_CredentialAdapter() {
		if (students_CredentialItemProvider == null) {
			students_CredentialItemProvider = new Students_CredentialItemProvider(this);
		}

		return students_CredentialItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockchain.Universities} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UniversitiesItemProvider universitiesItemProvider;

	/**
	 * This creates an adapter for a {@link blockchain.Universities}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUniversitiesAdapter() {
		if (universitiesItemProvider == null) {
			universitiesItemProvider = new UniversitiesItemProvider(this);
		}

		return universitiesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockchain.Professors} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProfessorsItemProvider professorsItemProvider;

	/**
	 * This creates an adapter for a {@link blockchain.Professors}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProfessorsAdapter() {
		if (professorsItemProvider == null) {
			professorsItemProvider = new ProfessorsItemProvider(this);
		}

		return professorsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockchain.Encryptor_SHA256} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Encryptor_SHA256ItemProvider encryptor_SHA256ItemProvider;

	/**
	 * This creates an adapter for a {@link blockchain.Encryptor_SHA256}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEncryptor_SHA256Adapter() {
		if (encryptor_SHA256ItemProvider == null) {
			encryptor_SHA256ItemProvider = new Encryptor_SHA256ItemProvider(this);
		}

		return encryptor_SHA256ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockchain.SmartContract} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SmartContractItemProvider smartContractItemProvider;

	/**
	 * This creates an adapter for a {@link blockchain.SmartContract}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSmartContractAdapter() {
		if (smartContractItemProvider == null) {
			smartContractItemProvider = new SmartContractItemProvider(this);
		}

		return smartContractItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockchain.Exam_Questions} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Exam_QuestionsItemProvider exam_QuestionsItemProvider;

	/**
	 * This creates an adapter for a {@link blockchain.Exam_Questions}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExam_QuestionsAdapter() {
		if (exam_QuestionsItemProvider == null) {
			exam_QuestionsItemProvider = new Exam_QuestionsItemProvider(this);
		}

		return exam_QuestionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockchain.Exam_Solution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Exam_SolutionItemProvider exam_SolutionItemProvider;

	/**
	 * This creates an adapter for a {@link blockchain.Exam_Solution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExam_SolutionAdapter() {
		if (exam_SolutionItemProvider == null) {
			exam_SolutionItemProvider = new Exam_SolutionItemProvider(this);
		}

		return exam_SolutionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockchain.Information} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InformationItemProvider informationItemProvider;

	/**
	 * This creates an adapter for a {@link blockchain.Information}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInformationAdapter() {
		if (informationItemProvider == null) {
			informationItemProvider = new InformationItemProvider(this);
		}

		return informationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link blockchain.Exam_Network} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Exam_NetworkItemProvider exam_NetworkItemProvider;

	/**
	 * This creates an adapter for a {@link blockchain.Exam_Network}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExam_NetworkAdapter() {
		if (exam_NetworkItemProvider == null) {
			exam_NetworkItemProvider = new Exam_NetworkItemProvider(this);
		}

		return exam_NetworkItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (online_Education_SystemItemProvider != null)
			online_Education_SystemItemProvider.dispose();
		if (blockItemProvider != null)
			blockItemProvider.dispose();
		if (students_CredentialItemProvider != null)
			students_CredentialItemProvider.dispose();
		if (universitiesItemProvider != null)
			universitiesItemProvider.dispose();
		if (professorsItemProvider != null)
			professorsItemProvider.dispose();
		if (encryptor_SHA256ItemProvider != null)
			encryptor_SHA256ItemProvider.dispose();
		if (smartContractItemProvider != null)
			smartContractItemProvider.dispose();
		if (exam_QuestionsItemProvider != null)
			exam_QuestionsItemProvider.dispose();
		if (exam_SolutionItemProvider != null)
			exam_SolutionItemProvider.dispose();
		if (informationItemProvider != null)
			informationItemProvider.dispose();
		if (exam_NetworkItemProvider != null)
			exam_NetworkItemProvider.dispose();
	}

}
